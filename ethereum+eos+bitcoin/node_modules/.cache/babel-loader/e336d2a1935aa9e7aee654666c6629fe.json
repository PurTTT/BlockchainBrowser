{"remainingRequest":"/Users/vicky/Downloads/以太坊+eos/node_modules/thread-loader/dist/cjs.js!/Users/vicky/Downloads/以太坊+eos/node_modules/babel-loader/lib/index.js!/Users/vicky/Downloads/以太坊+eos/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/vicky/Downloads/以太坊+eos/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/vicky/Downloads/以太坊+eos/src/components/bitBlocks.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/vicky/Downloads/以太坊+eos/src/components/bitBlocks.vue","mtime":1654241040340},{"path":"/Users/vicky/Downloads/以太坊+eos/package.json","mtime":1653895453620},{"path":"/Users/vicky/Downloads/以太坊+eos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/vicky/Downloads/以太坊+eos/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/vicky/Downloads/以太坊+eos/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/vicky/Downloads/以太坊+eos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/vicky/Downloads/以太坊+eos/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/vicky/Downloads/\\u4EE5\\u592A\\u574A+eos/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Web3 from 'web3';\nexport default {\n  data: function data() {\n    return {\n      title: 'EOS最新区块',\n      name: 'eosBlocks',\n      blocks: [],\n      txs: [],\n      timmer: null,\n      loading: true\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    if (typeof window.web3 !== 'undefined') {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      var ethNodeUrl = new Web3.providers.HttpProvider('http://localhost:8545'); // TODO: remote URL\n\n      window.web3 = new Web3(ethNodeUrl);\n      console.log(window.web3);\n    }\n\n    this.refreshData();\n    this.timmer = setInterval(function () {\n      _this.refreshData();\n    }, 60000);\n  },\n  methods: {\n    refreshData: function refreshData() {\n      try {\n        this.printBlocksAndTxs();\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    getBlocksAndTxs: function () {\n      var _getBlocksAndTxs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var blockNumber, blocks, block, txs, axios, netUrl, myheaders, i;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                //存blocknum\n                blockNumber = 0;\n                blocks = [];\n                block = {\n                  'timestamp': 0,\n                  'block.txn': 0\n                };\n                txs = []; //axios的定义\n\n                axios = require('axios'); //定义变量\n\n                netUrl = \"http://127.0.0.1:5000/info\";\n                myheaders = {\n                  \"Content-Type\": \"application/json\"\n                }; //请求\n\n                _context.next = 9;\n                return axios.post(netUrl).then(function (resp) {\n                  block = resp.data;\n                  blockNumber = resp.data.num;\n                  console.log(resp.data.num);\n                  console.log(blockNumber);\n                  console.log(\"已获得数字\");\n                }).catch(function (resp) {\n                  console.log('my miss');\n                });\n\n              case 9:\n                i = 1;\n\n              case 10:\n                if (!(i <= 15)) {\n                  _context.next = 23;\n                  break;\n                }\n\n                console.log('???'); //const block = await eth.getBlock(blockNumber-i);\n                //定义变量\n\n                netUrl = \"http://127.0.0.1:5000/bitBlock\";\n                myheaders = {\n                  \"Content-Type\": \"application/json\"\n                }; //请求\n\n                _context.next = 16;\n                return axios.post(netUrl, {\n                  num: blockNumber - i\n                }).then(function (resp) {\n                  block = resp.data;\n                  console.log('lets go');\n                  console.log(blocks); //请求内处理结果\n                  //请求处理结果完成\n                }).catch(function (resp) {\n                  console.log('my miss');\n                });\n\n              case 16:\n                //axios请求结束\n                block.time = block.time;\n                block.txn = block.txIndexes.length;\n                blocks.push(block);\n                txs = txs.concat(block.txIndexes);\n\n              case 20:\n                i++;\n                _context.next = 10;\n                break;\n\n              case 23:\n                //for end\n                console.log(txs);\n                console.log('blocks');\n                console.log(blocks);\n                blocks.push(block);\n                return _context.abrupt(\"return\", {\n                  blocks: blocks,\n                  txs: txs\n                });\n\n              case 28:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getBlocksAndTxs() {\n        return _getBlocksAndTxs.apply(this, arguments);\n      }\n\n      return getBlocksAndTxs;\n    }(),\n    printBlocksAndTxs: function () {\n      var _printBlocksAndTxs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var eth, result, txs, handledTxs, len, _loop, i;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                eth = window.web3.eth;\n                _context3.next = 3;\n                return this.getBlocksAndTxs();\n\n              case 3:\n                result = _context3.sent;\n                txs = result.txs;\n                handledTxs = [];\n                len = 0;\n\n                if (!len) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop(i) {\n                  var handledTx;\n                  return regeneratorRuntime.wrap(function _loop$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.next = 2;\n                          return eth.getTransaction(txs[len - i]);\n\n                        case 2:\n                          handledTx = _context2.sent;\n                          Object.keys(result.blocks).map(function (key) {\n                            if (result.blocks[key].number === handledTx.blockNumber) {\n                              handledTx.timestamp = result.blocks[key].timestamp;\n                            }\n                          });\n                          handledTxs.push(handledTx);\n\n                        case 5:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n                i = 1;\n\n              case 10:\n                if (!(i < 15)) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                return _context3.delegateYield(_loop(i), \"t0\", 12);\n\n              case 12:\n                i++;\n                _context3.next = 10;\n                break;\n\n              case 15:\n                this.loading = false;\n                this.blocks = result.blocks;\n                this.txs = handledTxs;\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function printBlocksAndTxs() {\n        return _printBlocksAndTxs.apply(this, arguments);\n      }\n\n      return printBlocksAndTxs;\n    }()\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.timmer && (this.timmer = null);\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;AAEA;EACAA,IADA,kBACA;IACA;MACAC,gBADA;MAEAC,iBAFA;MAGAC,UAHA;MAIAC,OAJA;MAKAC,YALA;MAMAC;IANA;EAQA,CAVA;EAWAC,OAXA,qBAWA;IAAA;;IACA;MACAC;IACA,CAFA,MAEA;MACA,0EADA,CACA;;MACAA;MACAC;IACA;;IAGA;IACA;MACA;IACA,CAFA,EAEA,KAFA;EAGA,CAzBA;EA0BAC;IACAC,WADA,yBACA;MACA;QACA;MACA,CAFA,CAEA;QACAF;MACA;IACA,CAPA;IASAG,eATA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAUA;gBACAC,WAXA,GAWA,CAXA;gBAYAV,MAZA,GAYA,EAZA;gBAaAW,KAbA,GAaA;kBAAA;kBAAA;gBAAA,CAbA;gBAcAV,GAdA,GAcA,EAdA,EAgBA;;gBACAW,KAjBA,GAiBAC,gBAjBA,EAkBA;;gBACAC,MAnBA,GAmBA,4BAnBA;gBAoBAC,SApBA,GAoBA;kBAAA;gBAAA,CApBA,EAqBA;;gBArBA;gBAAA,OAsBAH;kBACAD;kBACAD;kBACAJ;kBACAA;kBACAA;gBACA,CANA,EAMAU,KANA,CAMA;kBACAV;gBACA,CARA,CAtBA;;cAAA;gBAiCAW,CAjCA,GAiCA,CAjCA;;cAAA;gBAAA,MAiCAA,OAjCA;kBAAA;kBAAA;gBAAA;;gBAkCAX,mBAlCA,CAmCA;gBACA;;gBACAQ,MArCA,GAqCA,gCArCA;gBAsCAC,SAtCA,GAsCA;kBAAA;gBAAA,CAtCA,EAuCA;;gBAvCA;gBAAA,OAwCAH;kBAAAM;gBAAA;kBACAP;kBACAL;kBACAA,oBAHA,CAKA;kBAEA;gBACA,CARA,EAQAU,KARA,CAQA;kBACAV;gBACA,CAVA,CAxCA;;cAAA;gBAmDA;gBAEAK;gBACAA;gBACAX;gBACAC;;cAxDA;gBAiCAgB,GAjCA;gBAAA;gBAAA;;cAAA;gBA0DA;gBACAX;gBACAA;gBACAA;gBACAN;gBA9DA,iCA+DA;kBACAA,cADA;kBACAC;gBADA,CA/DA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;IAoEAkB,iBApEA;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAqEAC,GArEA,GAqEAf,WArEA,CAqEAe,GArEA;gBAAA;gBAAA,OAsEA,sBAtEA;;cAAA;gBAsEAC,MAtEA;gBAwEApB,GAxEA,GAwEAoB,UAxEA;gBAyEAC,UAzEA,GAyEA,EAzEA;gBA2EAC,GA3EA,GA2EA,CA3EA;;gBAAA,KA4EAA,GA5EA;kBAAA;kBAAA;gBAAA;;gBAAA,4DA6EAN,CA7EA;kBAAA;kBAAA;oBAAA;sBAAA;wBAAA;0BAAA;0BAAA,OA8EAG,gCA9EA;;wBAAA;0BA8EAI,SA9EA;0BAgFAC;4BACA;8BACAD;4BACA;0BACA,CAJA;0BAKAF;;wBArFA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA;gBA6EAL,CA7EA,GA6EA,CA7EA;;cAAA;gBAAA,MA6EAA,MA7EA;kBAAA;kBAAA;gBAAA;;gBAAA,qCA6EAA,CA7EA;;cAAA;gBA6EAA,GA7EA;gBAAA;gBAAA;;cAAA;gBAyFA;gBACA;gBACA;;cA3FA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA,CA1BA;EAwHAS,aAxHA,2BAwHA;IACA;EACA;AA1HA","names":["data","title","name","blocks","txs","timmer","loading","created","window","console","methods","refreshData","getBlocksAndTxs","blockNumber","block","axios","require","netUrl","myheaders","catch","i","num","printBlocksAndTxs","eth","result","handledTxs","len","handledTx","Object","beforeDestroy"],"sourceRoot":"src/components","sources":["bitBlocks.vue"],"sourcesContent":["<template>\n  <div>\n    <el-container>\n      <el-main>\n        <el-card>\n          <h3  v-text=\"title\"></h3>\n          <div class=\"table blocks\">\n      <div class=\"table-header\">\n        <div class=\"table-row\">\n          <div class=\"table-column\">区块高度</div>\n          <div class=\"table-column\">时间戳</div>\n          <div class=\"table-column\">交易对象数量</div>\n          <!-- <div class=\"table-column\">矿工</div> -->\n          <div class=\"table-column\">哈希</div>\n          <div class=\"table-column\">区块标识</div>\n          <!-- <div class=\"table-column\">Uncles</div>\n          <div class=\"table-column\">difficulty</div>\n          <div class=\"table-column\">extraData</div>\n          <div class=\"table-column\">logsBloom</div>\n          <div class=\"table-column\">stateRoot</div>\n          <div class=\"table-column\">totalDifficulty</div>\n          <div class=\"table-column\">transactionsRoot</div> -->\n        </div>\n      </div>\n      <div v-if=\"loading || blocks.length\" class=\"table-body\" :class=\"`${loading ? 'table-body-loading' : ''}`\">\n        <div class=\"table-row\" v-for=\"(block,i) in blocks\" :key=\"`block-${i}`\">\n          <div class=\"table-column\" v-text=\"block.block_num\"></div>\n          <div class=\"table-column\" v-text=\"block.time\"></div>\n          <div class=\"table-column\" v-text=\"block.txn\"></div>\n          <!-- <div class=\"table-column\" v-text=\"block.producer\"></div> -->\n          <div class=\"table-column\" v-text=\"block.hash\"></div>\n          <div class=\"table-column\" v-text=\"block.block_index\"></div>\n          <!-- <div class=\"table-column\" v-text=\"block.sha3Uncles\"></div>\n          <div class=\"table-column\" v-text=\"block.difficulty\"></div>\n          <div class=\"table-column\" v-text=\"block.extraData\"></div>\n          <div class=\"table-column\" v-text=\"block.logsBloom\"></div>\n          <div class=\"table-column\" v-text=\"block.stateRoot\"></div>\n          <div class=\"table-column\" v-text=\"block.totalDifficulty\"></div>\n          <div class=\"table-column\" v-text=\"block.transactionsRoot\"></div> -->\n        </div>\n      </div>\n      <div v-else class=\"table-body-nodata\">No data</div>\n    </div>\n        </el-card>\n      </el-main>\n    </el-container>\n  </div>\n</template>\n\n<script>\nimport Web3 from 'web3';\n\nexport default {\n  data() {\n    return {\n      title: 'EOS最新区块',\n      name:'eosBlocks',\n      blocks: [],\n      txs: [],\n      timmer: null,\n      loading: true\n    };\n  },\n  created() {\n    if (typeof window.web3 !== 'undefined') {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      const ethNodeUrl = new Web3.providers.HttpProvider('http://localhost:8545'); // TODO: remote URL\n      window.web3 = new Web3(ethNodeUrl);\n      console.log(window.web3);\n    }\n\n\n    this.refreshData();\n    this.timmer = setInterval(() => {\n      this.refreshData();\n    }, 60000);\n  },\n  methods: {\n    refreshData(){\n      try {\n        this.printBlocksAndTxs();\n      } catch (err) {\n        console.log(err);\n      }\n    },\n\n    async getBlocksAndTxs() {\n//存blocknum\n      var blockNumber = 0;\n      var blocks = [];\n      var block ={'timestamp':0,'block.txn':0};\n      let txs = [];\n\n//axios的定义\n      const axios = require('axios');\n//定义变量\n      var netUrl = \"http://127.0.0.1:5000/info\";\n      var myheaders = {\"Content-Type\": \"application/json\"};\n//请求\n        await axios.post(netUrl).then(resp=>{\n            block=resp.data\n            blockNumber = resp.data.num;\n            console.log(resp.data.num);\n            console.log(blockNumber);\n            console.log(\"已获得数字\");\n        }).catch(resp=>{\n            console.log('my miss');\n        });\n//axios请求结束\n\n      for (let i = 1; i <= 15; i++) {\n          console.log('???');\n        //const block = await eth.getBlock(blockNumber-i);\n//定义变量\n          var netUrl = \"http://127.0.0.1:5000/bitBlock\"; \n          var myheaders = {\"Content-Type\": \"application/json\"};\n//请求\n        await axios.post(netUrl,{ num:blockNumber-i}).then(resp=>{\n        block=resp.data\n        console.log('lets go');\n        console.log(blocks);\n\n//请求内处理结果\n\n//请求处理结果完成\n        }).catch(resp=>{\n        console.log('my miss');\n        })\n//axios请求结束\n\n        block.time = block.time;\n        block.txn = block.txIndexes.length;\n        blocks.push(block);\n        txs = txs.concat(block.txIndexes);\n      }\n//for end\n        console.log(txs);\n        console.log('blocks');\n        console.log(blocks);\n        blocks.push(block);\n      return {\n        blocks,txs\n      };\n    },\n\n    async printBlocksAndTxs() {\n      const { eth } = window.web3;\n      const result = await this.getBlocksAndTxs();\n\n      const txs = result.txs;\n      const handledTxs = [];\n\n      let len = 0;\n      if (len) {\n        for (let i = 1; i < 15; i++) {\n          const handledTx = await eth.getTransaction(txs[len-i]);\n\n          Object.keys(result.blocks).map(key => {\n            if(result.blocks[key].number === handledTx.blockNumber){\n              handledTx.timestamp = result.blocks[key].timestamp;\n            }\n          })\n          handledTxs.push(handledTx);\n        }\n      }\n\n      this.loading = false;\n      this.blocks = result.blocks;\n      this.txs = handledTxs;\n    }\n  },\n  beforeDestroy(){\n    this.timmer && (this.timmer = null);\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n.subtitle {\n  text-align: left;\n}\n\n@table-border: 1px solid #ddd;\n\n.table {\n  border-top: @table-border;\n}\n.table-header {\n  .table-row {\n    background-color: #f9f9f9;\n    &:hover {\n      background-color: #f9f9f9;\n    }\n  }\n}\n.table-body-loading{\n  background: url(\"../assets/loading.gif\") center center no-repeat;\n  background-size: 20px 20px;\n  height: 60px;\n  overflow: hidden;\n}\n.table-body-nodata{\n  text-align: center;\n  padding: 30px;\n}\n.table-row {\n  display: flex;\n  border-bottom: @table-border;\n  padding: 12px;\n  &:hover {\n    background-color: #f2f2f2;\n  }\n}\n.table-column {\n  flex: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n</style>"]}]}