{"remainingRequest":"/Users/vicky/Downloads/以太坊+eos/node_modules/thread-loader/dist/cjs.js!/Users/vicky/Downloads/以太坊+eos/node_modules/babel-loader/lib/index.js!/Users/vicky/Downloads/以太坊+eos/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/vicky/Downloads/以太坊+eos/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/vicky/Downloads/以太坊+eos/src/components/eosTransaction.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/vicky/Downloads/以太坊+eos/src/components/eosTransaction.vue","mtime":1653723978000},{"path":"/Users/vicky/Downloads/以太坊+eos/package.json","mtime":1653895453620},{"path":"/Users/vicky/Downloads/以太坊+eos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/vicky/Downloads/以太坊+eos/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/vicky/Downloads/以太坊+eos/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/vicky/Downloads/以太坊+eos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/vicky/Downloads/以太坊+eos/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/vicky/Downloads/\\u4EE5\\u592A\\u574A+eos/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Web3 from 'web3';\nexport default {\n  data: function data() {\n    return {\n      title: 'eos最新交易',\n      name: 'etheTransaction',\n      blocks: [],\n      txs: [],\n      timmer: null,\n      loading: true\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    this.refreshData();\n    this.timmer = setInterval(function () {\n      _this.refreshData();\n    }, 1000000);\n  },\n  methods: {\n    refreshData: function refreshData() {\n      try {\n        this.printBlocksAndTxs();\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    printBlocksAndTxs: function () {\n      var _printBlocksAndTxs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var mytxs, axios, netUrl, myheaders, myresult, handledTxs, relen, txlen, i, len, _i, tlen, j, handledTx;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                //axios的定义\n                axios = require('axios');\n                netUrl = \"http://127.0.0.1:5000/tx\";\n                myheaders = {\n                  \"Content-Type\": \"application/json\"\n                };\n                _context.next = 5;\n                return axios.post(netUrl).then(function (resp) {\n                  mytxs = resp.data;\n                  console.log('lets go');\n                  console.log(mytxs); //请求内处理结果\n                  //请求处理结果完成\n                }).catch(function (resp) {\n                  console.log(resp);\n                });\n\n              case 5:\n                //axios请求结束\n                myresult = mytxs.re;\n                console.log(myresult);\n                handledTxs = [];\n                relen = myresult.length;\n                txlen = 0;\n\n                for (i = 0; i < relen; i++) {\n                  txlen += myresult[i].transactions.length;\n                }\n\n                console.log(\"relen\", relen, 'txlen', txlen);\n                len = txlen;\n\n                if (len) {\n                  for (_i = 0; _i < relen; _i++) {\n                    //处理格式  \n                    tlen = myresult[_i].transactions.length;\n                    console.log(\"处理\", tlen);\n\n                    for (j = 0; j < tlen; j++) {\n                      handledTx = {\n                        //与块有关\n                        'blockHash': myresult[_i].id,\n                        'blockNumber': myresult[_i].block_num,\n                        'timestamp': myresult[_i].timestamp,\n                        //不到trx\n                        'net_usage': myresult[_i].transactions[j].net_usage_words,\n                        'cpu_usage': myresult[_i].transactions[j].cpu_usage_us,\n                        'status': myresult[_i].transactions[j].status,\n                        //trx内\n                        'hash': myresult[_i].transactions[j].trx.id,\n                        //transaction.action[0]内\n                        'user': myresult[_i].transactions[j].trx.transaction.actions[0].account,\n                        'action': myresult[_i].transactions[j].trx.transaction.actions[0].name,\n                        //data内\n                        'supplier': myresult[_i].transactions[j].trx.transaction.actions[0].data.supplier,\n                        'value': myresult[_i].transactions[j].trx.transaction.actions[0].data.value\n                      };\n                      handledTxs.push(handledTx);\n                      console.log(handledTx); //一条交易格式处理完成\n                    }\n                  }\n                }\n\n                this.loading = false;\n                this.txs = handledTxs;\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function printBlocksAndTxs() {\n        return _printBlocksAndTxs.apply(this, arguments);\n      }\n\n      return printBlocksAndTxs;\n    }()\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.timmer && (this.timmer = null);\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AAEA;EACAA,IADA,kBACA;IACA;MACAC,gBADA;MAEAC,uBAFA;MAGAC,UAHA;MAIAC,OAJA;MAKAC,YALA;MAMAC;IANA;EAQA,CAVA;EAWAC,OAXA,qBAWA;IAAA;;IAEA;IACA;MACA;IACA,CAFA,EAEA,OAFA;EAGA,CAjBA;EAkBAC;IACAC,WADA,yBACA;MACA;QACA;MACA,CAFA,CAEA;QACAC;MACA;IACA,CAPA;IAUAC,iBAVA;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAYA;gBACAC,KAbA,GAaAC,gBAbA;gBAeAC,MAfA,GAeA,0BAfA;gBAgBAC,SAhBA,GAgBA;kBAAA;gBAAA,CAhBA;gBAAA;gBAAA,OAiBAH;kBACAI;kBACAN;kBAEAA,mBAJA,CAMA;kBAEA;gBACA,CATA,EASAO,KATA,CASA;kBACAP;gBACA,CAXA,CAjBA;;cAAA;gBA6BA;gBAGAQ,QAhCA,GAgCAF,QAhCA;gBAiCAN;gBACAS,UAlCA,GAkCA,EAlCA;gBAmCAC,KAnCA,GAmCAF,eAnCA;gBAoCAG,KApCA,GAoCA,CApCA;;gBAqCA;kBAAAA;gBAAA;;gBACAX;gBAEAY,GAxCA,GAwCAD,KAxCA;;gBAyCA;kBACA;oBACA;oBACAE,IAFA,GAEAL,gCAFA;oBAGAR;;oBACA;sBACAc,SADA,GACA;wBACA;wBACA,4BAFA;wBAGA,qCAHA;wBAIA,mCAJA;wBAKA;wBACA,yDANA;wBAOA,sDAPA;wBAQA,6CARA;wBASA;wBACA,2CAVA;wBAWA;wBACA,uEAZA;wBAaA,sEAbA;wBAcA;wBACA,iFAfA;wBAgBA;sBAhBA,CADA;sBAmBAL;sBACAT,uBApBA,CAqBA;oBACA;kBACA;gBACA;;gBAEA;gBACA;;cAzEA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA,CAlBA;EA8FAe,aA9FA,2BA8FA;IACA;EACA;AAhGA","names":["data","title","name","blocks","txs","timmer","loading","created","methods","refreshData","console","printBlocksAndTxs","axios","require","netUrl","myheaders","mytxs","catch","myresult","handledTxs","relen","txlen","len","tlen","handledTx","beforeDestroy"],"sourceRoot":"src/components","sources":["eosTransaction.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-container>\r\n      <el-main>\r\n        <el-card>\r\n          <h3  v-text=\"title\"></h3>\r\n          <div class=\"table transactions\">\r\n          <div class=\"table-header\">\r\n            <div class=\"table-row\">\r\n                <div class=\"table-column\">交易哈希</div>\r\n                <div class=\"table-column\">区块哈希</div>\r\n                <div class=\"table-column\">区块高度</div>\r\n                <div class=\"table-column\">时间戳</div>\r\n                <div class=\"table-column\">从</div>\r\n                <div class=\"table-column\">到</div>\r\n                <div class=\"table-column\">价值</div>\r\n                <div class=\"table-column\">使用cpu</div>\r\n                <div class=\"table-column\">使用net</div>\r\n                <div class=\"table-column\">交易状态</div>\r\n                <div class=\"table-column\">action</div>\r\n                <!-- <div class=\"table-column\">input</div>\r\n                <div class=\"table-column\">r</div>\r\n                <div class=\"table-column\">s</div>\r\n                <div class=\"table-column\">v</div> -->\r\n            </div>\r\n          </div>\r\n        <div v-if=\"loading || txs.length\" class=\"table-body\" :class=\"`${loading ? 'table-body-loading' : ''}`\" >\r\n          <div class=\"table-row\" v-for=\"(tx,i) in txs\" :key=\"`tx-${i}`\">\r\n            <div class=\"table-column\" v-text=\"tx.hash\"></div>\r\n            <div class=\"table-column\" v-text=\"tx.blockHash\"></div>\r\n            <div class=\"table-column\" v-text=\"tx.blockNumber\"></div>\r\n            <div class=\"table-column\" v-text=\"tx.timestamp\"></div>\r\n            <div class=\"table-column\" v-text=\"tx.supplier\"></div>\r\n            <div class=\"table-column\" v-text=\"tx.user\"></div>\r\n            <div class=\"table-column\" v-text=\"tx.value\"></div>\r\n            <div class=\"table-column\" v-text=\"tx.cpu_usage\"></div>\r\n            <div class=\"table-column\" v-text=\"tx.net_usage\"></div>\r\n            <div class=\"table-column\" v-text=\"tx.status\"></div>\r\n            <div class=\"table-column\" v-text=\"tx.action\"></div>\r\n            <!-- <div class=\"table-column\" v-text=\"tx.input\"></div>\r\n            <div class=\"table-column\" v-text=\"tx.r\"></div>\r\n            <div class=\"table-column\" v-text=\"tx.s\"></div>\r\n            <div class=\"table-column\" v-text=\"tx.v\"></div> -->\r\n          </div>\r\n        </div>\r\n        <div v-else class=\"table-body-nodata\">No data</div>\r\n      </div>\r\n        </el-card>\r\n      </el-main>\r\n    </el-container>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Web3 from 'web3';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      title: 'eos最新交易',\r\n      name:'etheTransaction',\r\n      blocks: [],\r\n      txs: [],\r\n      timmer: null,\r\n      loading: true\r\n    };\r\n  },\r\n  created() {\r\n\r\n    this.refreshData();\r\n    this.timmer = setInterval(() => {\r\n      this.refreshData();\r\n    }, 1000000);\r\n  },\r\n  methods: {\r\n    refreshData(){\r\n      try {\r\n        this.printBlocksAndTxs();\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    },\r\n\r\n\r\n    async printBlocksAndTxs() {\n     var mytxs\n//axios的定义\n      const axios = require('axios');\n      \n      var netUrl = \"http://127.0.0.1:5000/tx\"; \n      var myheaders = {\"Content-Type\": \"application/json\"};\r\n      await axios.post(netUrl).then(resp=>{\n        mytxs=resp.data;\n        console.log('lets go');\n\n        console.log(mytxs);\n\n//请求内处理结果\n\n//请求处理结果完成\n        }).catch(resp=>{\n        console.log(resp);\n        });\n//axios请求结束\n\r\n\r\n      const myresult = mytxs.re;\n        console.log(myresult);\r\n      const handledTxs = [];\r\n     var relen = myresult.length;\r\n      let txlen = 0;\r\n      for (let i = 0; i < relen; i++) {txlen += myresult[i].transactions.length;}\n\t   console.log(\"relen\",relen,'txlen',txlen);\n\r\n      let len = txlen;\r\n      if (len) {\r\n        for (let i = 0; i < relen; i++) {\n//处理格式  \n\t   var tlen = myresult[i].transactions.length;\n\t   console.log(\"处理\",tlen);\r\n           for (let j = 0; j < tlen; j++) {\r\n           \tvar handledTx = {\n\t\t\t//与块有关\n\t\t\t'blockHash':myresult[i].id,\n\t\t\t'blockNumber':myresult[i].block_num,\n\t\t\t'timestamp':myresult[i].timestamp,\n\t\t\t//不到trx\n\t\t\t'net_usage':myresult[i].transactions[j].net_usage_words,\n\t\t\t'cpu_usage':myresult[i].transactions[j].cpu_usage_us,\n\t\t\t'status':myresult[i].transactions[j].status,\n\t\t\t//trx内\n  \t\t\t'hash':myresult[i].transactions[j].trx.id,\n\t\t\t//transaction.action[0]内\n\t\t\t'user':myresult[i].transactions[j].trx.transaction.actions[0].account,\n\t\t\t'action':myresult[i].transactions[j].trx.transaction.actions[0].name,\n\t\t\t//data内\n\t\t\t'supplier':myresult[i].transactions[j].trx.transaction.actions[0].data.supplier,\n\t\t\t'value':myresult[i].transactions[j].trx.transaction.actions[0].data.value\n\t\t};\n\t\thandledTxs.push(handledTx);\n\t\tconsole.log(handledTx)\n\t\t//一条交易格式处理完成\n\t    }\r\n        }\r\n      }\r\n\r\n      this.loading = false;\r\n      this.txs = handledTxs;\r\n    }\r\n  },\r\n  beforeDestroy(){\r\n    this.timmer && (this.timmer = null);\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.subtitle {\r\n  text-align: left;\r\n}\r\n\r\n@table-border: 1px solid #ddd;\r\n\r\n.table {\r\n  border-top: @table-border;\r\n}\r\n.table-header {\r\n  .table-row {\r\n    background-color: #f9f9f9;\r\n    &:hover {\r\n      background-color: #f9f9f9;\r\n    }\r\n  }\r\n}\r\n.table-body-loading{\r\n  background: url(\"../assets/loading.gif\") center center no-repeat;\r\n  background-size: 20px 20px;\r\n  height: 60px;\r\n  overflow: hidden;\r\n}\r\n.table-body-nodata{\r\n  text-align: center;\r\n  padding: 30px;\r\n}\r\n.table-row {\r\n  display: flex;\r\n  border-bottom: @table-border;\r\n  padding: 12px;\r\n  &:hover {\r\n    background-color: #f2f2f2;\r\n  }\r\n}\r\n.table-column {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n</style>"]}]}