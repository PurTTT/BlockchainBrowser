{"remainingRequest":"/Users/vicky/Downloads/以太坊+eos/node_modules/babel-loader/lib/index.js!/Users/vicky/Downloads/以太坊+eos/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/vicky/Downloads/以太坊+eos/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/vicky/Downloads/以太坊+eos/src/components/home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/vicky/Downloads/以太坊+eos/src/components/home.vue","mtime":1653575750000},{"path":"/Users/vicky/Downloads/以太坊+eos/package.json","mtime":1653641856000},{"path":"/Users/vicky/Downloads/以太坊+eos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/vicky/Downloads/以太坊+eos/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/vicky/Downloads/以太坊+eos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/vicky/Downloads/以太坊+eos/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/vicky/Downloads/\\u4EE5\\u592A\\u574A+eos/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Web3 from 'web3';\nexport default {\n  data: function data() {\n    return {\n      title: 'A Simple Blockchain Browser',\n      blocks: [],\n      txs: [],\n      timmer: null,\n      loading: true\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    if (typeof window.web3 !== 'undefined') {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      var ethNodeUrl = new Web3.providers.HttpProvider('http://localhost:8545'); // TODO: remote URL\n\n      window.web3 = new Web3(ethNodeUrl);\n      console.log(window.web3);\n    } // const { eth } = window.web3;\n    // eth.getBlockNumber().then(function(resolve) {\n    //   console.log(`getBlockNumber:${resolve}`);\n    // });\n    // eth.getAccounts().then(function(resolve) {\n    //   console.log(`getAccounts:${resolve}`);\n    // });\n    // eth\n    //   .getTransactionCount('0x7900681181e87B926A279769538f5325088eAdc1')\n    //   .then(function(resolve) {\n    //     console.log(`getTransactionCount:${resolve}`);\n    //   });\n    // eth.getCoinbase().then(function(resolve) {\n    //   console.log(`getCoinbase:${resolve}`);\n    // });\n\n\n    this.refreshData();\n    this.timmer = setInterval(function () {\n      _this.refreshData();\n    }, 60000);\n  },\n  methods: {\n    refreshData: function refreshData() {\n      try {\n        this.printBlocksAndTxs();\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    getBlocksAndTxs: function () {\n      var _getBlocksAndTxs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var eth, blockNumber, blocks, txs, i, block;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                eth = window.web3.eth;\n                _context.next = 3;\n                return eth.getBlockNumber();\n\n              case 3:\n                blockNumber = _context.sent;\n                blocks = [];\n                txs = [];\n                i = 1;\n\n              case 7:\n                if (!(i <= 10)) {\n                  _context.next = 18;\n                  break;\n                }\n\n                _context.next = 10;\n                return eth.getBlock(blockNumber - i);\n\n              case 10:\n                block = _context.sent;\n                block.timestamp = this.$filters.difference(block.timestamp);\n                block.txn = block.transactions.length;\n                blocks.push(block);\n                txs = txs.concat(block.transactions);\n\n              case 15:\n                i++;\n                _context.next = 7;\n                break;\n\n              case 18:\n                return _context.abrupt(\"return\", {\n                  blocks: blocks,\n                  txs: txs\n                });\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getBlocksAndTxs() {\n        return _getBlocksAndTxs.apply(this, arguments);\n      }\n\n      return getBlocksAndTxs;\n    }(),\n    printBlocksAndTxs: function () {\n      var _printBlocksAndTxs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var eth, result, txs, handledTxs, len, _loop, i;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                eth = window.web3.eth;\n                _context3.next = 3;\n                return this.getBlocksAndTxs();\n\n              case 3:\n                result = _context3.sent;\n                txs = result.txs;\n                handledTxs = [];\n                len = result.txs.length;\n\n                if (!len) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop(i) {\n                  var handledTx;\n                  return regeneratorRuntime.wrap(function _loop$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.next = 2;\n                          return eth.getTransaction(txs[len - i]);\n\n                        case 2:\n                          handledTx = _context2.sent;\n                          Object.keys(result.blocks).map(function (key) {\n                            if (result.blocks[key].number === handledTx.blockNumber) {\n                              handledTx.timestamp = result.blocks[key].timestamp;\n                            }\n                          });\n                          handledTxs.push(handledTx);\n\n                        case 5:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n                i = 1;\n\n              case 10:\n                if (!(i < 10)) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                return _context3.delegateYield(_loop(i), \"t0\", 12);\n\n              case 12:\n                i++;\n                _context3.next = 10;\n                break;\n\n              case 15:\n                this.loading = false;\n                this.blocks = result.blocks;\n                this.txs = handledTxs;\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function printBlocksAndTxs() {\n        return _printBlocksAndTxs.apply(this, arguments);\n      }\n\n      return printBlocksAndTxs;\n    }()\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.timmer && (this.timmer = null);\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqGA;AAEA;EACAA,IADA,kBACA;IACA;MACAC,oCADA;MAEAC,UAFA;MAGAC,OAHA;MAIAC,YAJA;MAKAC;IALA;EAOA,CATA;EAUAC,OAVA,qBAUA;IAAA;;IACA;MACAC;IACA,CAFA,MAEA;MACA,0EADA,CACA;;MACAA;MACAC;IACA,CAPA,CASA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;;;IAEA;IACA;MACA;IACA,CAFA,EAEA,KAFA;EAGA,CA3CA;EA4CAC;IACAC,WADA,yBACA;MACA;QACA;MACA,CAFA,CAEA;QACAF;MACA;IACA,CAPA;IASAG,eATA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAUAC,GAVA,GAUAL,WAVA,CAUAK,GAVA;gBAAA;gBAAA,OAWAA,oBAXA;;cAAA;gBAWAC,WAXA;gBAYAX,MAZA,GAYA,EAZA;gBAaAC,GAbA,GAaA,EAbA;gBAeAW,CAfA,GAeA,CAfA;;cAAA;gBAAA,MAeAA,OAfA;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAgBAF,6BAhBA;;cAAA;gBAgBAG,KAhBA;gBAkBAA;gBACAA;gBAEAb;gBACAC;;cAtBA;gBAeAW,GAfA;gBAAA;gBAAA;;cAAA;gBAAA,iCAyBA;kBACAZ,cADA;kBAEAC;gBAFA,CAzBA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;IA+BAa,iBA/BA;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAgCAJ,GAhCA,GAgCAL,WAhCA,CAgCAK,GAhCA;gBAAA;gBAAA,OAiCA,sBAjCA;;cAAA;gBAiCAK,MAjCA;gBAmCAd,GAnCA,GAmCAc,UAnCA;gBAoCAC,UApCA,GAoCA,EApCA;gBAsCAC,GAtCA,GAsCAF,iBAtCA;;gBAAA,KAuCAE,GAvCA;kBAAA;kBAAA;gBAAA;;gBAAA,4DAwCAL,CAxCA;kBAAA;kBAAA;oBAAA;sBAAA;wBAAA;0BAAA;0BAAA,OAyCAF,gCAzCA;;wBAAA;0BAyCAQ,SAzCA;0BA2CAC;4BACA;8BACAD;4BACA;0BACA,CAJA;0BAKAF;;wBAhDA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA;gBAwCAJ,CAxCA,GAwCA,CAxCA;;cAAA;gBAAA,MAwCAA,MAxCA;kBAAA;kBAAA;gBAAA;;gBAAA,qCAwCAA,CAxCA;;cAAA;gBAwCAA,GAxCA;gBAAA;gBAAA;;cAAA;gBAoDA;gBACA;gBACA;;cAtDA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA,CA5CA;EAqGAQ,aArGA,2BAqGA;IACA;EACA;AAvGA","names":["data","title","blocks","txs","timmer","loading","created","window","console","methods","refreshData","getBlocksAndTxs","eth","blockNumber","i","block","printBlocksAndTxs","result","handledTxs","len","handledTx","Object","beforeDestroy"],"sourceRoot":"src/components","sources":["home.vue"],"sourcesContent":["<template>\n  <div>\n    <h1 v-text=\"title\"></h1>\n    <h2 class=\"subtitle\">Blocks:</h2>\n    <div class=\"table blocks\">\n      <div class=\"table-header\">\n        <div class=\"table-row\">\n          <div class=\"table-column\">Height</div>\n          <div class=\"table-column\">Age</div>\n          <div class=\"table-column\">Txn</div>\n          <div class=\"table-column\">Miner</div>\n          <div class=\"table-column\">GasUsed</div>\n          <div class=\"table-column\">GasLimit</div>\n          <div class=\"table-column\">hash</div>\n          <div class=\"table-column\">mixHash</div>\n          <div class=\"table-column\">nonce</div>\n          <div class=\"table-column\">parentHash</div>\n          <div class=\"table-column\">receiptsRoot</div>\n          <div class=\"table-column\">size</div>\n          <!-- <div class=\"table-column\">Uncles</div>\n          <div class=\"table-column\">difficulty</div>\n          <div class=\"table-column\">extraData</div>\n          <div class=\"table-column\">logsBloom</div> \n          <div class=\"table-column\">stateRoot</div>\n          <div class=\"table-column\">totalDifficulty</div>\n          <div class=\"table-column\">transactionsRoot</div> -->\n        </div>\n      </div>\n      <div v-if=\"loading || blocks.length\" class=\"table-body\" :class=\"`${loading ? 'table-body-loading' : ''}`\">\n        <div class=\"table-row\" v-for=\"(block,i) in blocks\" :key=\"`block-${i}`\">\n          <div class=\"table-column\" v-text=\"block.number\"></div>\n          <div class=\"table-column\" v-text=\"block.timestamp\"></div>\n          <div class=\"table-column\" v-text=\"block.txn\"></div>\n          <div class=\"table-column\" v-text=\"block.miner\"></div>\n          <div class=\"table-column\" v-text=\"block.gasUsed\"></div>\n          <div class=\"table-column\" v-text=\"block.gasLimit\"></div>\n          <div class=\"table-column\" v-text=\"block.hash\"></div>\n          <div class=\"table-column\" v-text=\"block.mixHash\"></div>\n          <div class=\"table-column\" v-text=\"block.nonce\"></div>\n          <div class=\"table-column\" v-text=\"block.parentHash\"></div>\n          <div class=\"table-column\" v-text=\"block.receiptsRoot\"></div>\n          <div class=\"table-column\" v-text=\"block.size\"></div>\n          <!-- <div class=\"table-column\" v-text=\"block.sha3Uncles\"></div>\n          <div class=\"table-column\" v-text=\"block.difficulty\"></div>\n          <div class=\"table-column\" v-text=\"block.extraData\"></div>\n          <div class=\"table-column\" v-text=\"block.logsBloom\"></div>\n          <div class=\"table-column\" v-text=\"block.stateRoot\"></div>\n          <div class=\"table-column\" v-text=\"block.totalDifficulty\"></div>\n          <div class=\"table-column\" v-text=\"block.transactionsRoot\"></div> -->\n        </div>\n      </div>\n      <div v-else class=\"table-body-nodata\">No data</div>\n    </div>\n\n    <br>\n    <h2 class=\"subtitle\">Transactions:</h2>\n    <div class=\"table transactions\">\n      <div class=\"table-header\">\n        <div class=\"table-row\">\n            <div class=\"table-column\">TxHash</div>\n            <div class=\"table-column\">Block Hash</div>\n            <div class=\"table-column\">Block Height</div>\n            <div class=\"table-column\">TimeStamp</div>\n            <div class=\"table-column\">From</div>\n            <div class=\"table-column\">To</div>\n            <div class=\"table-column\">Value</div>\n            <div class=\"table-column\">Gas</div>\n            <div class=\"table-column\">GasPrice</div>\n            <div class=\"table-column\">Nonce</div>\n            <div class=\"table-column\">transactionIndex</div>\n            <!-- <div class=\"table-column\">input</div>\n            <div class=\"table-column\">r</div>\n            <div class=\"table-column\">s</div>\n            <div class=\"table-column\">v</div> -->\n        </div>\n      </div>\n      <div v-if=\"loading || txs.length\" class=\"table-body\" :class=\"`${loading ? 'table-body-loading' : ''}`\" >\n        <div class=\"table-row\" v-for=\"(tx,i) in txs\" :key=\"`tx-${i}`\">\n          <div class=\"table-column\" v-text=\"tx.hash\"></div>\n          <div class=\"table-column\" v-text=\"tx.blockHash\"></div>\n          <div class=\"table-column\" v-text=\"tx.blockNumber\"></div>\n          <div class=\"table-column\" v-text=\"tx.timestamp\"></div>\n          <div class=\"table-column\" v-text=\"tx.from\"></div>\n          <div class=\"table-column\" v-text=\"tx.to\"></div>\n          <div class=\"table-column\" v-text=\"tx.value\"></div>\n          <div class=\"table-column\" v-text=\"tx.gas\"></div>\n          <div class=\"table-column\" v-text=\"tx.gasPrice\"></div>\n          <div class=\"table-column\" v-text=\"tx.nonce\"></div>\n          <div class=\"table-column\" v-text=\"tx.transactionIndex\"></div>\n          <!-- <div class=\"table-column\" v-text=\"tx.input\"></div>\n          <div class=\"table-column\" v-text=\"tx.r\"></div>\n          <div class=\"table-column\" v-text=\"tx.s\"></div>\n          <div class=\"table-column\" v-text=\"tx.v\"></div> -->\n        </div>\n      </div>\n      <div v-else class=\"table-body-nodata\">No data</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Web3 from 'web3';\n\nexport default {\n  data() {\n    return {\n      title: 'A Simple Blockchain Browser',\n      blocks: [],\n      txs: [],\n      timmer: null,\n      loading: true\n    };\n  },\n  created() {\n    if (typeof window.web3 !== 'undefined') {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      const ethNodeUrl = new Web3.providers.HttpProvider('http://localhost:8545'); // TODO: remote URL\n      window.web3 = new Web3(ethNodeUrl);\n      console.log(window.web3);\n    }\n\n    // const { eth } = window.web3;\n\n    // eth.getBlockNumber().then(function(resolve) {\n    //   console.log(`getBlockNumber:${resolve}`);\n    // });\n\n    // eth.getAccounts().then(function(resolve) {\n    //   console.log(`getAccounts:${resolve}`);\n    // });\n\n    // eth\n    //   .getTransactionCount('0x7900681181e87B926A279769538f5325088eAdc1')\n    //   .then(function(resolve) {\n    //     console.log(`getTransactionCount:${resolve}`);\n    //   });\n\n    // eth.getCoinbase().then(function(resolve) {\n    //   console.log(`getCoinbase:${resolve}`);\n    // });\n\n    this.refreshData();\n    this.timmer = setInterval(() => {\n      this.refreshData();\n    }, 60000);\n  },\n  methods: {\n    refreshData(){\n      try {\n        this.printBlocksAndTxs();\n      } catch (err) {\n        console.log(err);\n      }\n    },\n\n    async getBlocksAndTxs() {\n      const { eth } = window.web3;\n      const blockNumber = await eth.getBlockNumber();\n      const blocks = [];\n      let txs = [];\n\n      for (let i = 1; i <= 10; i++) {\n        const block = await eth.getBlock(blockNumber-i);\n\n        block.timestamp = this.$filters.difference(block.timestamp);\n        block.txn = block.transactions.length;\n\n        blocks.push(block);\n        txs = txs.concat(block.transactions);\n      }\n\n      return {\n        blocks,\n        txs\n      };\n    },\n\n    async printBlocksAndTxs() {\n      const { eth } = window.web3;\n      const result = await this.getBlocksAndTxs();\n\n      const txs = result.txs;\n      const handledTxs = [];\n      \n      let len = result.txs.length;\n      if (len) {\n        for (let i = 1; i < 10; i++) {\n          const handledTx = await eth.getTransaction(txs[len-i]);\n          \n          Object.keys(result.blocks).map(key => {\n            if(result.blocks[key].number === handledTx.blockNumber){\n              handledTx.timestamp = result.blocks[key].timestamp;\n            }\n          })\n          handledTxs.push(handledTx);\n        }\n      }\n\n      this.loading = false;\n      this.blocks = result.blocks;\n      this.txs = handledTxs;\n    }\n  },\n  beforeDestroy(){\n    this.timmer && (this.timmer = null);\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n.subtitle {\n  text-align: left;\n}\n\n@table-border: 1px solid #ddd;\n\n.table {\n  border-top: @table-border;\n}\n.table-header {\n  .table-row {\n    background-color: #f9f9f9;\n    &:hover {\n      background-color: #f9f9f9;\n    }\n  }\n}\n.table-body-loading{\n  background: url(\"../assets/loading.gif\") center center no-repeat;\n  background-size: 20px 20px;\n  height: 60px;\n  overflow: hidden;\n}\n.table-body-nodata{\n  text-align: center;\n  padding: 30px;\n}\n.table-row {\n  display: flex;\n  border-bottom: @table-border;\n  padding: 12px;\n  &:hover {\n    background-color: #f2f2f2;\n  }\n}\n.table-column {\n  flex: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n</style>"]}]}